/* SPDX-License-Identifier: BSD-2-Clause */
/* Copyright (c) 2019 Netronome Systems, Inc. */

#ifndef LIBKEFIR_H
#define LIBKEFIR_H

struct bpf_program {
	int TODO;
};

typedef struct kefir_filter kefir_filter;

/*
 *
 * Front end
 *
 */

enum kefir_rule_type {
	RULE_TYPE_ETHTOOL_NTUPLE,
	RULE_TYPE_LIBPCAP_EXPR,
	RULE_TYPE_TC_FLOWER,
	RULE_TYPE_IPTABLES,
	RULE_TYPE_OVS_FLOW,
};

/**
 * Create and initialize a new filter object.
 * @return a pointer to the filter (or NULL and sets errno if an error occurred)
 */
kefir_filter *kefir_init_filter(void);

/**
 * Destroy a filter object and free all associated memory.
 */
void kefir_destroy_filter(kefir_filter *filter);

/**
 * Count the number of rules present in the list of a filter.
 * @filter the filter for which to count the rules
 * @return the number of rules in that filter
 */
unsigned int kefir_sizeof_filter(const kefir_filter *filter);

/**
 * Add a rule to a filter.
 * @filter object to add the rule to
 * @rule_type type of the rule to add
 * @user_rule array of words defining the rule in the format for rule_type
 * @rule_size number of words in user_rule
 * @index index of the rule in the list (overwrite if pre-existing)
 * @return 0 on success, error code otherwise
 */
int
kefir_load_rule(kefir_filter *filter,
		enum kefir_rule_type rule_type,
		const char **user_rule,
		unsigned int rule_size,
		unsigned int index);

/**
 * Add a rule to a filter.
 * @filter object to add the rule to
 * @rule_type type of the rule to add
 * @rule string containing the rule
 * @index index of the rule in the list (insertion)
 * @return 0 on success, error code otherwise
 */
int
kefir_insert_rule(kefir_filter *filter,
		  enum kefir_rule_type rule_type,
		  const char *rule,
		  unsigned int index);

/**
 * Delete a rule from a filter.
 * The rule must have been previously added to the filter.
 * @filter: object to remove the rule from
 * @rule_type type of the rule to delete
 * @rule string containing the rule
 * @return 0 on success, error code otherwise
 */
int
kefir_delete_rule(kefir_filter *filter,
		  enum kefir_rule_type rule_type,
		  const char *rule);

/**
 * Delete a rule at given index from a filter.
 * @filter: object to remove the rule from
 * @index index of the rule to delete
 * @return 0 on success, error code otherwise
 */
int
kefir_delete_rule_by_id(kefir_filter *filter,
			unsigned int index);

/** Dump all rules of a filter to the console.
 * @filter: object to dump
 */
void
kefir_dump_filter(const kefir_filter *filter);

/*
 *
 * Data base
 *
 */

/**
 * Save a filter to a file
 * @filter filter to save
 * @filename name of the file where to save the filter (it will be created
 *           if necessary, overwritten overwise)
 * @return 0 on success, error code otherwise
 */
int kefir_save_filter_to_file(const kefir_filter *filter,
			      const char* filename);

/**
 * Load a filter from a backup
 * @filename name of the file to load the filter from
 * @return filter object on success (to be freed by the user on exit), NULL
 *         and sets errno otherwise
 */
kefir_filter *kefir_load_filter_from_file(const char* filename);

/*
 *
 * Back end
 *
 */

typedef struct kefir_cprog kefir_cprog;
typedef struct kefir_cprog_options kefir_cprog_options;

/**
 * Convert a filter into an eBPF-compatible C program.
 * @filter filter to convert
 * @opts options for convertion (indicating e.g. desired hook).
 * @return an object containing all parameters required to create an
 *         eBPF-compatible C program
 */
kefir_cprog *kefir_convert_filter_to_cprog(const kefir_filter *filter,
					   const kefir_cprog_options *opts);

/**
 * Dump a C program generated by the library.
 * @cprog program to dump
 */
void kefir_dump_cprog(const kefir_cprog *cprog);

/**
 * Convert a C program into eBPF bytecode.
 * @cprog C program to convert
 * @bpfprog pointer to the eBPF program to create; if NULL, will be malloc()'ed
 * @return 0 on success, error code otherwise
 */
int kefir_convert_cprog_to_bpf(const kefir_cprog *cprog,
			       struct bpf_program *bpfprog);

/**
 * Dump an eBPF program generated by the library.
 * @bpfprog program to dump
 */
void kefir_dump_bpf(const struct bpf_program *bpfprog);

/*
 *
 * Other
 *
 */

char *kefir_strerror();

#endif /* LIBKEFIR_H */
