/* SPDX-License-Identifier: BSD-2-Clause */
/* Copyright (c) 2019 Netronome Systems, Inc. */

#ifndef TESTER_H
#define TESTER_H

#include <stdint.h>
#include <stdio.h>

#include <kefir/libkefir.h>

#define MAX_NAME_LEN		128
#define MAX_FILENAME_LEN	128
#define MAX_RULE_LEN		128
#define MAX_RULE_PER_TEST	100

struct test_rule {
	char			rule[MAX_RULE_LEN];
	enum kefir_rule_type	type;
};

struct kefir_test {
	char			name[MAX_NAME_LEN];
	struct test_rule	*rule_set[MAX_RULE_PER_TEST];
	char			prog_file[MAX_FILENAME_LEN];
	size_t			data_size_in;
	uint8_t			*data_in;
	uint32_t		expected_retval;
};

extern struct kefir_test ethtool_basic_tests[];
extern struct kefir_test ethtool_basic_tests_masks[];
extern struct kefir_test tcflower_basic_tests[];
extern struct kefir_test tcflower_basic_tests_masks[];
extern struct kefir_test json_tests[];
extern struct kefir_test advanced_tests[];

static uint8_t __attribute__((unused)) tcp4_packet[] = {
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06,	// Dst MAC
	0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,	// Src MAC
	0x81, 0x00,				// IEEE 802.1Q tag
	0x0a, 0xbc,				// VLAN TCI
	0x08, 0x00,				// Type: IPv4
	0x45,					// Version / Hdr length
	0x08,					// ToS
	0x00, 0x3c,				// Total length
	0xba, 0xf8,				// Identification
	0x40, 0x00,				// Flags / Frag. offset
	0x40,					// TTL
	0x06,					// Protocol: TCP
	0x95, 0x70,				// Checksum
	0x0a, 0x0a, 0x0a, 0x02,			// IP source
	0x0a, 0x0a, 0x0a, 0x01,			// IP destination
	0x22, 0xb8,				// TCP source port
	0x07, 0xd0,				// TCP destination port
	0x9d, 0xb6, 0x65, 0x5b,			// TCP sequence number
	0x00, 0x00, 0x00, 0x00,			// TCP ack number
	0x80, 0x01, 0x05, 0xa4,			// TCP data off, flags, window
	0xea, 0x79, 0x00, 0x00,			// TCP checksum, urgent ptr
	0x01, 0x01,				// TCP options: padding no-ops
	0x08, 0x0a, 0xc2, 0xd4, 0x6a, 0x69, 0x48, 0x11, 0x27, 0x04, // TCP TS
	0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88	// Data
};

static uint8_t __attribute__((unused)) tcp6_packet[] = {
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06,	// Dst MAC
	0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,	// Src MAC
	0x81, 0x00,				// IEEE 802.1Q tag
	0x0a, 0xbc,				// VLAN TCI
	0x81, 0x00,				// IEEE 802.1Q tag
	0x0d, 0xef,				// VLAN TCI
	0x86, 0xdd,				// Type: IPv6
	0x61, 0xc0, 0x00, 0x00,			// Version, Tclass, Flow label
	0x00, 0x28,				// Payload length
	0x06,					// Next Header: TCP
	0x40,					// Hop limit
	0xca, 0xfe, 0x00, 0x04, 0x0a, 0x11,	// IP source (1)
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// IP source (2)
	0x00, 0x00, 0x00, 0x01,			// IP source (3)
	0x00, 0x11, 0x22, 0x33, 0x44, 0x55,	// IP destination (1)
	0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb,	// IP destination (2)
	0xcc, 0xdd, 0xee, 0xff,			// IP destination (3)
	0x22, 0xb8,				// TCP source port
	0x07, 0xd0,				// TCP destination port
	0x9d, 0xb6, 0x65, 0x5b,			// TCP sequence number
	0x00, 0x00, 0x00, 0x00,			// TCP ack number
	0x80, 0x01, 0x05, 0xa4,			// TCP data off, flags, window
	0xea, 0x79, 0x00, 0x00,			// TCP checksum, urgent ptr
	0x01, 0x01,				// TCP options: padding no-ops
	0x08, 0x0a, 0xc2, 0xd4, 0x6a, 0x69, 0x48, 0x11, 0x27, 0x04, // TCP TS
	0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88	// Data
};

#endif /* TESTER_H */
